{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/search-form.js","components/error-message.js","components/forecast-details.js","components/modal.js","components/app.jsx","serviceWorker.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","date","temperature","description","icon","onSelect","iconId","style","padding","data-testid","moment","format","toString","name","fontFamily","borderRadius","border","cursor","color","onClick","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","SearchForm","handleKeyPress","event","handleSubmit","state","searchText","handleInputChange","bind","e","this","setState","target","value","margin","type","onChange","searchState","onKeyPress","paddingLeft","marginLeft","React","Component","ErrorMessage","message","ForecastDetails","fontSize","opacity","min","humidity","wind","speed","direction","ReactModal","openModal","closeModal","Modal","setAppElement","isOpen","onRequestClose","overlay","backgroundColor","display","justifyContent","alignItems","content","textAlign","position","left","bottom","right","App","useState","loading","setLoading","setForecasts","modalIsOpen","setModalIsOpen","location","setLocation","errorMessage","setErrorMessage","useEffect","a","axios","get","response","data","fetchProduct","selectedDate","setSelectedDate","selectedForecast","find","window","reload","href","faUndo","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.94923c7f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LocationDetails = (props) => (\n  <h1 className=\"location-details\">\n    {props.city}, {props.country}\n  </h1>\n);\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;\n","import React from \"react\";\nimport WeatherIcon from \"react-icons-weather\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\n\nconst ForecastSummary = ({\n  date,\n  temperature,\n  description,\n  icon,\n  onSelect,\n}) => {\n  const iconId = icon;\n\n  return (\n    <div\n      className=\"forecast-summary\"\n      style={{\n        padding: \"5px 5px 5px 5px\",\n      }}\n    >\n      <div className=\"date\" data-testid=\"date-id\">\n        <span>{moment(date).format(\"ddd Do MMM\")}</span>\n      </div>\n      <div className=\"icon\" data-testid={iconId.toString()}>\n        <span>\n          <WeatherIcon name=\"owm\" iconId={iconId.toString()} />\n        </span>\n      </div>\n      <div className=\"temperature\" data-testid=\"temperature-id\">\n        <span>{temperature}&deg;c</span>\n      </div>\n      <div className=\"description\" data-testid=\"description-id\">\n        <span>{description}</span>\n      </div>\n\n      <button\n        style={{\n          fontFamily: \"Balsamiq Sans, cursive\",\n          borderRadius: \"5px\",\n          border: \"0.5px solid rgb(53, 51, 51) \",\n          cursor: \"pointer\",\n          color: \"rgb(53, 51, 51)\",\n        }}\n        onClick={() => onSelect(date)}\n      >\n        More Details\n      </button>\n    </div>\n  );\n};\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  temperature: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n};\n\nexport default ForecastSummary;\n","import React from \"react\";\nimport ForecastSummary from \"./forecast-summary\";\nimport \"../styles/forecast-summaries.css\";\nimport PropTypes from \"prop-types\";\n\nconst ForecastSummaries = (props) => (\n  <div className=\"forecast-summaries\">\n    {props.forecasts.map((forecast) => (\n      <ForecastSummary\n        key={forecast.date}\n        date={forecast.date}\n        description={forecast.description}\n        icon={forecast.icon}\n        temperature={forecast.temperature.max}\n        onSelect={props.onForecastSelect}\n      />\n    ))}\n  </div>\n);\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.array.isRequired,\n  onForecastSelect: PropTypes.func.isRequired,\n};\nexport default ForecastSummaries;\n","import React from \"react\";\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: \"\",\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      this.props.handleSubmit(this.state.searchText);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className=\"search-form\"\n        style={{\n          margin: \"25px 25px 0px 0px\",\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={this.handleInputChange}\n          value={this.searchState}\n          onKeyPress={this.handleKeyPress}\n          style={{\n            borderRadius: \"5px\",\n            border: \"0.5px solid rgb(53, 51, 51)\",\n            paddingLeft: \"5px\",\n          }}\n        />\n\n        <button\n          className=\"search-button\"\n          onClick={() => this.props.handleSubmit(this.state.searchText)}\n          style={{\n            fontFamily: \"Balsamiq Sans, cursive\",\n            borderRadius: \"5px\",\n            border: \"0.5px solid rgb(53, 51, 51)\",\n            marginLeft: \"3px\",\n            cursor: \"pointer\",\n            color: \"rgb(53, 51, 51)\",\n          }}\n        >\n          Search\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"../styles/error-message.css\";\n\nconst ErrorMessage = ({ message }) => {\n  if ((message = \"Request failed with status code 404\")) {\n    return (\n      <h1 className=\"message-element\">Sorry this location does not exist.</h1>\n    );\n  } else {\n    return <h1 className=\"message-element\">{message}</h1>;\n  }\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\n//import \"../styles/forecast-details.css\";\n//import Modal from \"react-modal\";\n\nconst ForecastDetails = ({ forecast }) => {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"date-details\" data-testid=\"date-id\">\n        <span style={{ fontSize: \"50px\" }}>\n          {moment(forecast.date).format(\"ddd Do MMM\")}\n        </span>\n      </div>\n\n      <div\n        className=\"max-temperature\"\n        data-testid=\"max-temperature-id\"\n        style={{ fontSize: \"25px\" }}\n      >\n        Max temperature:{\" \"}\n        <span style={{ opacity: \".5\" }}>{forecast.temperature.max}&deg;c</span>\n      </div>\n      <div\n        className=\"min-temperature\"\n        data-testid=\"min-temperature-id\"\n        style={{ fontSize: \"25px\" }}\n      >\n        Min temperature:{\" \"}\n        <span style={{ opacity: \".5\" }}> {forecast.temperature.min}&deg;c</span>\n      </div>\n      <div\n        className=\"humidity\"\n        data-testid=\"humidity\"\n        style={{ fontSize: \"25px\" }}\n      >\n        Humidity: <span style={{ opacity: \".5\" }}>{forecast.humidity}%</span>\n      </div>\n      <div\n        className=\"wind-speed\"\n        data-testid=\"wind-speed\"\n        style={{ fontSize: \"25px\" }}\n      >\n        Wind speed:{\" \"}\n        <span style={{ opacity: \".5\" }}>{forecast.wind.speed} mph</span>\n      </div>\n      <div\n        className=\"wind-direction\"\n        data-testid=\"wind-direction\"\n        style={{ fontSize: \"25px\" }}\n      >\n        Wind direction:{\" \"}\n        <span style={{ opacity: \".5\" }}> {forecast.wind.direction}</span>\n      </div>\n    </div>\n    // </Modal>\n    // </div>\n  );\n};\n\nForecastDetails.propTypes = {\n  forecast: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    temperature: PropTypes.shape({\n      max: PropTypes.number.isRequired,\n      min: PropTypes.number.isRequired,\n    }).isRequired,\n    wind: PropTypes.shape({\n      speed: PropTypes.number.isRequired,\n      direction: PropTypes.string.isRequired,\n    }).isRequired,\n    humidity: PropTypes.number.isRequired,\n    description: PropTypes.string,\n    icon: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ForecastDetails;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport \"../styles/modal.css\";\nimport ForecastDetails from \"./forecast-details\";\n\nconst ReactModal = ({ forecast, openModal, closeModal }) => {\n  Modal.setAppElement(\"body\");\n  return (\n    <Modal\n      isOpen={openModal}\n      onRequestClose={closeModal}\n      style={{\n        overlay: {\n          backgroundColor: \"transparent\",\n          fontFamily: \"Balsamiq Sans, cursive\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        },\n        content: {\n          textAlign: \"center\",\n          border: \"3px solid rgb(53, 51, 51)\",\n          borderRadius: \"20px\",\n          position: \"relative\",\n          padding: \"50px\",\n          left: \"4px\",\n          bottom: \"0px\",\n          right: \"0px\",\n        },\n      }}\n    >\n      <ForecastDetails forecast={forecast} />\n    </Modal>\n  );\n};\n\nexport default ReactModal;\n","import React, { useState, useEffect } from \"react\";\nimport LocationDetails from \"./location-details\";\nimport ForecastSummaries from \"./forecast-summaries\";\nimport \"../styles/app.css\";\nimport axios from \"axios\";\nimport SearchForm from \"./search-form\";\nimport ErrorMessage from \"./error-message\";\nimport ReactModal from \"./modal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [forecasts, setForecasts] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [location, setLocation] = useState({\n    city: \"\",\n    country: \"\",\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    const city = location.city;\n    const fetchProduct = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(\n          `https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`\n        );\n\n        setForecasts(response.data.forecasts);\n        setLocation({ city: response.data.location.city, country: \"UK\" });\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n      setLoading(false);\n    };\n    fetchProduct();\n  }, []);\n\n  const [selectedDate, setSelectedDate] = useState(0);\n  const selectedForecast = forecasts.find(\n    (forecast) => forecast.date === selectedDate\n  );\n\n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n    setModalIsOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalIsOpen(false);\n  };\n\n  const handleSubmit = (city) => {\n    const fetchProduct = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(\n          `https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`\n        );\n\n        setForecasts(response.data.forecasts);\n        setLocation({ city: response.data.location.city, country: \"UK\" });\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n      setLoading(false);\n    };\n    fetchProduct();\n  };\n\n  const refreshPage = () => {\n    window.location.reload(false);\n  };\n\n  if (loading) {\n    return <h1 className=\"loading\">Loading...</h1>;\n  } else if (!errorMessage) {\n    return (\n      <div className=\"forecast\">\n        <div\n          className=\"location-wrapper\"\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          {location.city && (\n            <LocationDetails city={location.city} country={location.country} />\n          )}\n\n          {location.city && <SearchForm handleSubmit={handleSubmit} />}\n        </div>\n\n        <ForecastSummaries\n          forecasts={forecasts}\n          onForecastSelect={handleForecastSelect}\n        />\n        {selectedForecast && (\n          <ReactModal\n            forecast={selectedForecast}\n            openModal={modalIsOpen}\n            closeModal={handleCloseModal}\n          />\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"error-message\">\n        <a className=\"refresh\" onClick={refreshPage} href=\"#\">\n          <FontAwesomeIcon className=\"undo\" icon={faUndo} />\n        </a>\n        <ErrorMessage message={errorMessage} />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}